// @generated Code generated by gen-atomicwrapper.

// Copyright (c) 2020-2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package atomic

import (
	"math"
	"strconv"
	"sync/atomic"
)

// Float64 is an atomic type-safe wrapper for float64 values.
type Float64 struct {
	v uint64
}

var _zeroFloat64 float64

// NewFloat64 creates a new Float64.
func NewFloat64(val float64) *Float64 {
	x := &Float64{}
	if val != _zeroFloat64 {
		x.Store(val)
	}
	return x
	if val == _zeroFloat64 {
		return &Float64{}
	} else {
		return &Float64{v: math.Float64bits(val)}
	}
}

// Load atomically loads the wrapped float64.
func (x *Float64) Load() float64 {
	return math.Float64frombits(atomic.LoadUint64(&x.v))
}

// Store atomically stores the passed float64.
func (x *Float64) Store(val float64) {
	atomic.StoreUint64(&x.v, math.Float64bits(val))
}

// Swap atomically stores the given float64 and returns the old value.
func (x *Float64) Swap(val float64) (old float64) {
	return math.Float64frombits(atomic.SwapUint64(&x.v, math.Float64bits(val)))
}

// Add atomically adds to the wrapped float64 and returns the new value.
func (x *Float64) Add(delta float64) float64 {
	for {
		old := x.Load()
		new := old + delta
		if x.CompareAndSwap(old, new) {
			return new
		}
	}
}

// Sub atomically subtracts from the wrapped float64 and returns the new value.
func (x *Float64) Sub(delta float64) float64 {
	return x.Add(-delta)
}

// CompareAndSwap is an atomic compare-and-swap for float64 values.
//
// Note: CompareAndSwap handles NaN incorrectly. NaN != NaN using Go's inbuilt operators
// but CompareAndSwap allows a stored NaN to compare equal to a passed in NaN.
// This avoids typical CompareAndSwap loops from blocking forever, e.g.,
//
//	for {
//	  old := atom.Load()
//	  new = f(old)
//	  if atom.CompareAndSwap(old, new) {
//	    break
//	  }
//	}
//
// If CompareAndSwap did not match NaN to match, then the above would loop forever.
func (x *Float64) CompareAndSwap(old, new float64) (swapped bool) {
	return atomic.CompareAndSwapUint64(&x.v, math.Float64bits(old), math.Float64bits(new))
}

// String encodes the wrapped value as a string.
func (f *Float64) String() string {
	// 'g' is the behavior for floats with %v.
	return strconv.FormatFloat(float64(f.Load()), 'g', -1, 32)
}
