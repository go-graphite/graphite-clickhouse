// @generated Code generated by gen-atomicwrapper.

// Copyright (c) 2020-2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package atomic

import (
	"sync/atomic"
	"time"
)

// Duration is an atomic type-safe wrapper for time.Duration values.
type Duration struct {
	v int64
}

// NewDuration creates a new Duration.
func NewDuration(val time.Duration) *Duration {
	return &Duration{v: val.Nanoseconds()}
}

// Load atomically loads the wrapped time.Duration.
func (x *Duration) Load() time.Duration {
	return time.Duration(atomic.LoadInt64(&x.v))
}

// Store atomically stores the passed time.Duration.
func (x *Duration) Store(val time.Duration) {
	atomic.StoreInt64(&x.v, val.Nanoseconds())
}

// CompareAndSwap is an atomic compare-and-swap for time.Duration values.
func (x *Duration) CompareAndSwap(old, new time.Duration) (swapped bool) {
	return atomic.CompareAndSwapInt64(&x.v, old.Nanoseconds(), new.Nanoseconds())
}

// Swap atomically stores the given time.Duration and returns the old value.
func (x *Duration) Swap(val time.Duration) (old time.Duration) {
	return time.Duration(atomic.SwapInt64(&x.v, val.Nanoseconds()))
}

// Add atomically adds to the wrapped time.Duration and returns the new value.
func (x *Duration) Add(delta time.Duration) time.Duration {
	return time.Duration(atomic.AddInt64(&x.v, delta.Nanoseconds()))
}

// Sub atomically subtracts from the wrapped time.Duration and returns the new value.
func (x *Duration) Sub(delta time.Duration) time.Duration {
	return time.Duration(atomic.AddInt64(&x.v, -delta.Nanoseconds()))
}

// String encodes the wrapped value as a string.
func (x *Duration) String() string {
	return x.Load().String()
}
